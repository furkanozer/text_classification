import pandas as pd
from collections import Counter
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import matplotlib.pyplot as plt

df = pd.read_csv("news_headlines.csv")
df

print("Toplam başlık sayısı:", len(df))

df["Headline"] = df["Headline"].str.lower()

stop_words = set(stopwords.words('english'))
def remove_stopwords(text):
    words = word_tokenize(text)
    filtered_words = [word for word in words if word.lower() not in stop_words]
    cleaned_text = ' '.join(filtered_words)
    return cleaned_text

df["Headline"] = df["Headline"].apply(remove_stopwords)
print(df)

def remove_punctuation(text):
    words = word_tokenize(text)
    cleaned_words = [word for word in words if word.isalnum()]
    cleaned_text = ' '.join(cleaned_words)
    return cleaned_text

df["Headline"] = df["Headline"].apply(remove_punctuation)

print(df)

nltk.download('vader_lexicon')
nltk.download('punkt')

sid = SentimentIntensityAnalyzer()

headlines = df["Headline"].tolist()

# Her başlık için duygu skoru hesaplıyoruz
for headline in headlines:
    print("Başlık:", headline)
    words = nltk.word_tokenize(headline)
    compound_score = 0
    for word in words:
        scores = sid.polarity_scores(word)
        compound_score += scores['compound']
    average_score = compound_score / len(words)
    print("Duygu Skoru:", average_score)
    print()

# Her bir başlık için duygu skorlarına göre başlığı sınıflandırma
classified_headlines = []
for headline in headlines:
    scores = sid.polarity_scores(headline)
    if scores['compound'] > 0.1:
        classified_headlines.append('Positive')
    elif scores['compound'] < -0.1:
        classified_headlines.append('Negative')
    else:
        classified_headlines.append('Neutral')

df["Sentiment"] = classified_headlines
df

sentiment_counts = df["Sentiment"].value_counts()
sentiment_counts

plt.figure(figsize=(8, 6))
sentiment_counts.plot(kind='bar', color=['red', 'green', 'blue'])
plt.title('İfadeler Grafiği')
plt.xlabel('İfadeler')
plt.ylabel('Sayı')
plt.xticks(rotation=0)
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report

X_train,X_test,y_train,y_test = train_test_split(df["Headline"],df["Sentiment"],
                                                 test_size=0.25,random_state=42)

model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(X_train, y_train)
y_pred = model.predict(X_test)



accuracy = accuracy_score(y_test, y_pred)
print("Doğru Sınıflandırma Oranı:", accuracy)
print(classification_report(y_test, y_pred))



